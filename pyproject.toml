[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-base"
version = "1.0.0"
description = "Highly extensible AI-powered coding platform for rapid development of LLM-driven applications"
authors = [
    {name = "AI Base Platform", email = "info@aibase.dev"},
]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # Core FastAPI and ASGI server
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    # Database ORM and migrations
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    # Data validation and settings
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # Environment and configuration
    "python-dotenv>=1.0.0",
    # System monitoring and health checks
    "psutil>=5.9.0",
    # HTTP client for external services
    "httpx>=0.25.2",
    "requests>=2.31.0",
    # Authentication and security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "bcrypt>=4.1.2",
    # Database drivers
    "psycopg2-binary>=2.9.9", # PostgreSQL driver
    "pymongo>=4.6.0", # MongoDB driver
    # Date and time utilities
    "python-dateutil>=2.8.2",
    # AI/LLM integration
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "tiktoken>=0.5.0",
    # Web Testing dependencies
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.0",
    "selenium>=4.15.0",
    "lxml>=4.9.0",
    # Data Quality dependencies
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "pyspark>=3.5.0",
    # Utility libraries
    "aiofiles>=23.2.1",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.2",
    "rich>=13.7.0",
    "aioredis>=2.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
]

test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "coverage>=7.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/ai-base/ai-base"
Documentation = "https://ai-base.readthedocs.io"
Repository = "https://github.com/ai-base/ai-base.git"
Issues = "https://github.com/ai-base/ai-base/issues"

[tool.hatch.build.targets.wheel]
packages = ["core", "apps", "v1"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_base", "core", "apps"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "selenium.*",
    "pyspark.*",
    "anthropic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=apps",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["core", "apps"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
